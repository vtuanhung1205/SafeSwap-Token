import { a as Deserializer, bo as HexInput } from '../account--Q9z_xMN.mjs';
import { MultiKeyAccount } from './MultiKeyAccount.mjs';
import { A as Account, o as SingleKeyAccount, b as Ed25519Account } from '../Ed25519Account-ndmdpFe9.mjs';
import { KeylessAccount } from './KeylessAccount.mjs';
import { FederatedKeylessAccount } from './FederatedKeylessAccount.mjs';
import '../types/indexer.mjs';
import '../types/generated/operations.mjs';
import '../types/generated/types.mjs';
import '../utils/apiEndpoints.mjs';
import '../utils/const.mjs';
import '../core/common.mjs';
import './AbstractKeylessAccount.mjs';
import './EphemeralKeyPair.mjs';
import '../core/crypto/ephemeral.mjs';
import '../federatedKeyless-CiyplsOB.mjs';
import '../core/crypto/proof.mjs';
import '../types/keyless.mjs';
import '@noble/curves/abstract/weierstrass';
import '@noble/curves/abstract/tower';

/**
 * Utility functions for working with accounts.
 */
declare namespace AccountUtils {
    function toBytes(account: Account): Uint8Array;
    function toHexStringWithoutPrefix(account: Account): string;
    function toHexString(account: Account): string;
    function deserialize(deserializer: Deserializer): Account;
    function keylessAccountFromHex(hex: HexInput): KeylessAccount;
    function federatedKeylessAccountFromHex(hex: HexInput): FederatedKeylessAccount;
    function multiKeyAccountFromHex(hex: HexInput): MultiKeyAccount;
    function singleKeyAccountFromHex(hex: HexInput): SingleKeyAccount;
    function ed25519AccountFromHex(hex: HexInput): Ed25519Account;
    function fromHex(hex: HexInput): Account;
    function fromBytes(bytes: Uint8Array): Account;
}

export { AccountUtils };
