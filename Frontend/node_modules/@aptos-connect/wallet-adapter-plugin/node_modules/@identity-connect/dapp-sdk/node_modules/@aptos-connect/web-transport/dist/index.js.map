{"version":3,"sources":["../src/index.ts","../src/prompt.ts","../src/state.ts","../src/telegram/openTelegramPrompt.ts","../src/telegram/createWalletRequest.ts","../src/telegram/getClientIdentityKey.ts","../src/telegram/getWalletResponse.ts","../src/telegram/smartPolling.ts","../src/telegram/index.ts"],"sourcesContent":["// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  ConnectRequest,\n  ConnectResponse,\n  DisconnectRequest,\n  DisconnectResponse,\n  GetConnectedAccountsRequest,\n  GetConnectedAccountsResponse,\n  IsConnectedRequest,\n  IsConnectedResponse,\n  SerializedWalletRequest,\n  SignAndSubmitTransactionRequest,\n  SignInRequest,\n  SignInResponse,\n  SignMessageRequest,\n  SignTransactionRequest,\n} from '@aptos-connect/wallet-api';\nimport { openPrompt, waitForPromptResponse } from './prompt';\nimport { addConnectedAccount, getConnectedAccounts, removeConnectedAccount } from './state';\n\nimport { isTelegramMiniApp, openTelegramPrompt } from './telegram';\n\nexport class WebWalletTransport {\n  constructor(\n    private readonly baseUrl: string,\n    private readonly provider: 'google' | 'apple' = 'google',\n    private readonly tgWebAppUrl?: string,\n  ) {\n    this.baseUrl = baseUrl;\n  }\n\n  async sendPromptRequest(request: SerializedWalletRequest) {\n    if (isTelegramMiniApp()) {\n      return openTelegramPrompt({\n        baseUrl: this.baseUrl,\n        provider: this.provider,\n        request,\n        tgWebAppUrl: this.tgWebAppUrl,\n      });\n    }\n\n    const url = new URL(`${this.baseUrl}/prompt/`);\n    url.searchParams.set('provider', this.provider);\n    const prompt = openPrompt(url);\n\n    return waitForPromptResponse(this.baseUrl, prompt, request);\n  }\n\n  async sendRequest(request: SerializedWalletRequest) {\n    switch (request.name) {\n      case IsConnectedRequest.name: {\n        const connectedAccounts = getConnectedAccounts();\n        return IsConnectedResponse.serialize(connectedAccounts.length > 0);\n      }\n      case GetConnectedAccountsRequest.name: {\n        const connectedAccounts = getConnectedAccounts();\n        return GetConnectedAccountsResponse.serialize(connectedAccounts);\n      }\n      case ConnectRequest.name: {\n        const serializedResponse = await this.sendPromptRequest(request);\n        const response = ConnectResponse.deserialize(serializedResponse);\n        if (response.args.status === 'approved') {\n          const { account, pairing } = response.args.args;\n          if (pairing === undefined) {\n            addConnectedAccount(account);\n          }\n        }\n        return serializedResponse;\n      }\n      case SignInRequest.name: {\n        const serializedResponse = await this.sendPromptRequest(request);\n        const response = SignInResponse.deserialize(serializedResponse, (request as unknown as SignInRequest).version);\n        if (response.args.status === 'approved') {\n          const { account } = response.args.args;\n          addConnectedAccount(account);\n        }\n        return serializedResponse;\n      }\n      case DisconnectRequest.name: {\n        const [activeAccount] = getConnectedAccounts();\n        if (activeAccount) {\n          removeConnectedAccount(activeAccount.address);\n        }\n        return DisconnectResponse.serialize({});\n      }\n      case SignMessageRequest.name:\n      case SignTransactionRequest.name:\n      case SignAndSubmitTransactionRequest.name: {\n        return this.sendPromptRequest(request);\n      }\n      default: {\n        throw new Error('Unexpected request');\n      }\n    }\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  ConnectResponse,\n  isTypedMessage,\n  PromptApprovalResponseMessage,\n  PromptConnectionRequestMessage,\n  PromptConnectionResponseMessage,\n  PromptUnauthorizedErrorMessage,\n  SerializedWalletRequest,\n  SerializedWalletResponse,\n} from '@aptos-connect/wallet-api';\n\nconst DEFAULT_PROMPT_SIZE = { height: 695, width: 465 };\nconst PROMPT_POLLER_INTERVAL = 500;\n\nconst dismissalSerializedResponse = ConnectResponse.serialize({ status: 'dismissed' });\n\nexport class PromptUnauthorizedError extends Error {\n  constructor() {\n    super('Unauthorized');\n  }\n}\n\nexport function openPrompt(url: string | URL, size = DEFAULT_PROMPT_SIZE) {\n  const { height, width } = size;\n  const options = {\n    height,\n    left: window.screenLeft + Math.round((window.outerWidth - width) / 2),\n    popup: true,\n    top: window.screenTop + Math.round((window.outerHeight - height) / 2),\n    width,\n  };\n\n  const strOptions = Object.entries(options)\n    .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n    .reduce((acc, entry) => `${acc}, ${entry}`);\n\n  const href = url instanceof URL ? url.href : url;\n  const promptWindow = window.open(href, undefined, strOptions);\n  if (promptWindow === null) {\n    throw new Error(\"Couldn't open prompt\");\n  }\n\n  return promptWindow;\n}\n\nexport async function waitForPromptResponse(baseUrl: string, promptWindow: Window, request: SerializedWalletRequest) {\n  return new Promise<SerializedWalletResponse>((resolve, reject) => {\n    const listeners = {\n      onMessage: (message: MessageEvent) => {\n        // Ignore messages from untrusted sources\n        if (message.source !== promptWindow || message.origin !== baseUrl) {\n          return;\n        }\n        if (isTypedMessage(PromptUnauthorizedErrorMessage, message.data)) {\n          window.removeEventListener('message', listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          reject(new PromptUnauthorizedError());\n          return;\n        }\n        if (isTypedMessage(PromptConnectionRequestMessage, message.data)) {\n          promptWindow.postMessage(new PromptConnectionResponseMessage(request), baseUrl);\n          return;\n        }\n        if (isTypedMessage(PromptApprovalResponseMessage, message.data)) {\n          window.removeEventListener('message', listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(message.data.serializedValue);\n        }\n      },\n      promptPollerId: setInterval(() => {\n        if (promptWindow.closed) {\n          window.removeEventListener('message', listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(dismissalSerializedResponse);\n        }\n      }, PROMPT_POLLER_INTERVAL),\n    };\n\n    window.addEventListener('message', listeners.onMessage);\n  });\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountInfo,\n  base64ToBytes,\n  bytesToBase64,\n  deserializeAccountInfo,\n  serializeAccountInfo,\n} from '@aptos-connect/wallet-api';\nimport { AccountAddress, Deserializer, Serializer } from '@aptos-labs/ts-sdk';\n\nconst localDappStateKey = '@aptos-connect/dapp-local-state';\n\n/**\n * Local dapp state loosely synced with the web wallet's state.\n * Due to browser restrictions (storage partitioning), it's no longer possible\n * to access the web wallet's state.\n */\ninterface DappLocalState {\n  connectedAccounts: AccountInfo[];\n}\n\nfunction serializeLocalDappState(state: DappLocalState): Uint8Array {\n  const serializer = new Serializer();\n  serializer.serializeU32AsUleb128(state.connectedAccounts.length);\n  for (const account of state.connectedAccounts) {\n    serializeAccountInfo(serializer, account);\n  }\n  return serializer.toUint8Array();\n}\n\nfunction deserializeLocalDappState(serializedValue: Uint8Array): DappLocalState {\n  const deserializer = new Deserializer(serializedValue);\n  const connectedAccountsLength = deserializer.deserializeUleb128AsU32();\n  const connectedAccounts: AccountInfo[] = [];\n  for (let i = 0; i < connectedAccountsLength; i += 1) {\n    connectedAccounts.push(deserializeAccountInfo(deserializer));\n  }\n  return { connectedAccounts };\n}\n\nfunction getState(): DappLocalState {\n  const encodedValue = window.localStorage.getItem(localDappStateKey);\n  return encodedValue ? deserializeLocalDappState(base64ToBytes(encodedValue)) : { connectedAccounts: [] };\n}\n\nfunction setState(state: DappLocalState) {\n  const serializedValue = serializeLocalDappState(state);\n  const encodedValue = bytesToBase64(serializedValue);\n  window.localStorage.setItem(localDappStateKey, encodedValue);\n}\n\nexport function getConnectedAccounts() {\n  const state = getState();\n  return state.connectedAccounts;\n}\n\nexport function addConnectedAccount(account: AccountInfo) {\n  const { connectedAccounts, ...state } = getState();\n  connectedAccounts.push(account);\n  setState({ ...state, connectedAccounts });\n}\n\nexport function removeConnectedAccount(address: AccountAddress) {\n  const { connectedAccounts, ...state } = getState();\n  const index = connectedAccounts.findIndex((a) => a.address.equals(address));\n  if (index >= 0) {\n    connectedAccounts.splice(index, 1);\n  }\n  setState({ ...state, connectedAccounts });\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  encodePopupWalletRequest,\n  makePopupWalletRequestChallenge,\n  SerializedWalletRequest,\n  SignedPopupWalletRequest,\n} from '@aptos-connect/wallet-api';\nimport { postEvent as postTelegramEvent } from '@telegram-apps/bridge';\nimport { v4 as randomUUID } from 'uuid';\nimport { createWalletRequest } from './createWalletRequest';\nimport { getClientIdentityKey } from './getClientIdentityKey';\nimport { getWalletResponse } from './getWalletResponse';\n\nexport async function openTelegramPrompt(args: {\n  baseUrl: string;\n  provider?: 'google' | 'apple';\n  request: SerializedWalletRequest;\n  tgWebAppUrl?: string;\n}) {\n  const { baseUrl, provider, request: body, tgWebAppUrl = '/AptosConnectBot/AptosConnect' } = args;\n  const identityKey = getClientIdentityKey();\n  const clientIdentityKey = identityKey.publicKey();\n  const requestId = randomUUID();\n  const timestamp = Date.now();\n\n  const challenge = makePopupWalletRequestChallenge({ body, id: requestId, timestamp });\n  const signature = identityKey.sign(challenge);\n\n  const signedWalletRequest: SignedPopupWalletRequest = {\n    body,\n    clientIdentityKey,\n    id: requestId,\n    signature,\n    timestamp,\n  };\n\n  // Telegram only supports start parameters up to 1024 characters\n  // If the encoded request is longer, we send it to the backend and mark\n  // the request as \"deferred\" by omitting the body\n  let encodedRequest = encodePopupWalletRequest(signedWalletRequest);\n  if (encodedRequest.length > 1024) {\n    void createWalletRequest(baseUrl, signedWalletRequest);\n    encodedRequest = encodePopupWalletRequest({\n      clientIdentityKey,\n      id: requestId,\n      signature,\n      timestamp,\n    });\n  }\n\n  const startParam = `prompt_${provider ?? ''}${encodedRequest}`;\n  postTelegramEvent('web_app_open_tg_link', {\n    path_full: `${tgWebAppUrl}?startapp=${startParam}`,\n  });\n\n  return getWalletResponse(baseUrl, clientIdentityKey, requestId);\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  bytesToBase64,\n  bytesToBase64url,\n  encodeWalletRequestBody,\n  SignedPopupWalletRequest,\n} from '@aptos-connect/wallet-api';\n\nexport async function createWalletRequest(baseUrl: string, request: SignedPopupWalletRequest) {\n  const encodedClientIdentityKey = bytesToBase64url(request.clientIdentityKey.toUint8Array());\n\n  const response = await fetch(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/`, {\n    body: JSON.stringify({\n      body: encodeWalletRequestBody(request.body),\n      id: request.id,\n      signature: bytesToBase64(request.signature.toUint8Array()),\n      timestamp: request.timestamp,\n    }),\n    headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n    method: 'post',\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed creating the wallet request');\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Ed25519PrivateKey } from '@aptos-labs/ts-sdk';\n\nconst identityKeyStorageKey = '@aptos-connect/client-identity-key';\n\nexport function getClientIdentityKey() {\n  const serialized = window.localStorage.getItem(identityKeyStorageKey);\n  if (serialized) {\n    return new Ed25519PrivateKey(serialized);\n  }\n  const identityKey = Ed25519PrivateKey.generate();\n  window.localStorage.setItem(identityKeyStorageKey, identityKey.toString());\n  return identityKey;\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { base64ToBytes, bytesToBase64url, SerializedWalletResponse } from '@aptos-connect/wallet-api';\nimport { Ed25519PublicKey } from '@aptos-labs/ts-sdk';\nimport { smartPolling } from './smartPolling';\n\nexport async function getWalletResponse(\n  baseUrl: string,\n  clientIdentityKey: Ed25519PublicKey,\n  requestId: string,\n): Promise<SerializedWalletResponse> {\n  const encodedClientIdentityKey = bytesToBase64url(clientIdentityKey.toUint8Array());\n  const url = new URL(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/${requestId}/response/`);\n  const response = await smartPolling(() =>\n    fetch(url, {\n      headers: { Accept: 'application/json' },\n      method: 'get',\n    }),\n  );\n\n  const responseBody = await response.json();\n  const data = base64ToBytes(responseBody.data.body);\n  return { data };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-await-in-loop */\n\n/**\n * How long to wait after resuming before trying to fetch the resource again.\n * This gives time for the underlying resource to be persisted.\n */\nconst ON_RESUME_DELAY = 300;\n\n/**\n * How often to poll for the resource when the window is in the foreground.\n * This should typically not be needed, but it's a good fallback in case we\n * can't detect whether the window is in the background\n */\nconst FG_RESPONSE_POLLING_INTERVAL = 2000;\n\n/**\n * Polling interval when the window is in the background.\n * This can be arbitrarily long, but it's still good to keep polling as fallback.\n */\nconst BG_RESPONSE_POLLING_INTERVAL = 3000;\n\n/**\n * Given there's no \"cancel\" mechanism for polling, we should time out the polling after\n * an arbitrarily long time to prevent memory leaks.\n */\nconst POLLING_TIMEOUT = 5 * 60000;\n\nexport interface Timer extends Promise<void> {\n  cancel: () => void;\n}\n\nfunction waitFor(milliseconds: number): Timer {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  let cancel = () => {};\n  const timer = new Promise((resolve) => {\n    timeoutId = setTimeout(resolve, milliseconds);\n    cancel = () => {\n      clearTimeout(timeoutId);\n      resolve();\n    };\n  }) as Timer;\n  timer.cancel = cancel;\n  return timer;\n}\n\n/**\n * Smart polling function that tries to reduce as much as possible the number of requests,\n * while still returning quickly after the resource becomes available.\n */\nexport async function smartPolling(callback: () => Promise<Response>): Promise<Response> {\n  let timer: Timer | undefined;\n  let justResumed = false;\n  let pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n\n  const onWindowFocus = () => {\n    justResumed = true;\n    pollingInterval = FG_RESPONSE_POLLING_INTERVAL;\n    timer?.cancel();\n  };\n\n  const onWindowBlur = () => {\n    pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n  };\n\n  window.addEventListener('focus', onWindowFocus);\n  window.addEventListener('blur', onWindowBlur);\n\n  try {\n    const startTime = Date.now();\n    while (Date.now() - startTime < POLLING_TIMEOUT) {\n      timer = waitFor(pollingInterval);\n      await timer;\n\n      if (justResumed) {\n        timer = waitFor(ON_RESUME_DELAY);\n        await timer;\n      }\n\n      const response = await callback();\n      if (response.status === 200) {\n        return response;\n      }\n      justResumed = false;\n    }\n    throw new Error('Timeout');\n  } finally {\n    window.removeEventListener('focus', onWindowFocus);\n    window.removeEventListener('blur', onWindowFocus);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport function isTelegramMiniApp() {\n  return (window as any).TelegramWebviewProxy !== undefined;\n}\n\nexport * from './openTelegramPrompt';\n"],"mappings":"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","names":["import_wallet_api","import_wallet_api","import_wallet_api","import_wallet_api","import_ts_sdk","import_wallet_api","randomUUID","postTelegramEvent"]}