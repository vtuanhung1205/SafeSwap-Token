"use strict";
// Copyright 2022 Fewcha. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.PetraMask = void 0;
const types_1 = require("./types");
class PetraMask {
    provider;
    constructor(provider) {
        this.provider = provider;
    }
    async connect() {
        const response = await this.provider.connect();
        if (response) {
            const account = await this.provider.account();
            return (0, types_1.createReponse)("connect", 200, account);
        }
        return (0, types_1.createReponse)("connect", 400, null);
    }
    async account() {
        const isConnect = await this.provider.isConnected();
        if (isConnect) {
            const account = await this.provider.account();
            return (0, types_1.createReponse)("isConnected", 200, account);
        }
        return (0, types_1.createReponse)("isConnected", 400, null);
    }
    async isConnected() {
        const response = await this.provider.isConnected();
        return (0, types_1.createReponse)("isConnected", 200, response);
    }
    async disconnect() {
        const response = await this.provider.disconnect();
        if (response) {
            return (0, types_1.createReponse)("disconnect", 200, true);
        }
        return (0, types_1.createReponse)("disconnect", 400, false);
    }
    async getNetwork() {
        const response = await this.provider.network();
        return (0, types_1.createReponse)("network", 200, response);
    }
    async signAndSubmitTransaction(txnRequest) {
        const response = await this.provider.signAndSubmitTransaction(txnRequest);
        return (0, types_1.createReponse)("signAndSubmitTransaction", 200, response);
    }
    async signTransaction(txnRequest) {
        const response = await this.provider.signTransaction(txnRequest);
        return (0, types_1.createReponse)("signTransaction", 200, response);
    }
    async signMessage(message) {
        const response = await this.provider.signMessage(message);
        return (0, types_1.createReponse)("signMessage", 200, response);
    }
}
exports.PetraMask = PetraMask;
