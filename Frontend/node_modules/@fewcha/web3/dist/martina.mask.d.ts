import { BCS, MaybeHexString, Types as Gen } from "aptos";
import { Response } from "./types";
export declare class MartianMask {
    provider: any;
    constructor(provider: any);
    generateTransaction(payload: Gen.EntryFunctionPayload, options?: Partial<Gen.SubmitTransactionRequest>): Promise<Response<Uint8Array>>;
    signTransaction(txnRequest: Gen.SubmitTransactionRequest): Promise<Response<Gen.SubmitTransactionRequest>>;
    submitTransaction(signedTxnRequest: Gen.SubmitTransactionRequest): Promise<Response<Gen.HexEncodedBytes>>;
    signAndSubmitTransaction(txnRequest: Gen.SubmitTransactionRequest): Promise<Response<Gen.HexEncodedBytes>>;
    signMessage(message: string): Promise<Response<string>>;
    createCollection(name: string, description: string, uri: string, maxAmount: BCS.AnyNumber): Promise<Response<string>>;
    createToken(collectionName: string, name: string, description: string, supply: number, uri: string, max: BCS.AnyNumber, royalty_payee_address: MaybeHexString, royalty_points_denominator: number, royalty_points_numerator: number, property_keys: Array<string>, property_values: Array<string>, property_types: Array<string>): Promise<Response<Gen.HexEncodedBytes>>;
    getTransactions(query?: {
        start?: BigInt | number;
        limit?: number;
    }): Promise<Response<Gen.Transaction[]>>;
    getTransactionByHash(txnHash: string): Promise<Response<Gen.Transaction>>;
    getAccountTransactions(accountAddress: MaybeHexString, query?: {
        start?: BigInt | number;
        limit?: number;
    }): Promise<Response<Gen.Transaction[]>>;
    getAccountResources(accountAddress: MaybeHexString, query?: {
        ledgerVersion?: BigInt | number;
    }): Promise<Response<Gen.MoveResource[]>>;
    getAccount(accountAddress: MaybeHexString): Promise<Response<Gen.AccountData>>;
    getChainId(): Promise<Response<number>>;
    getLedgerInfo(): Promise<Response<Gen.IndexResponse>>;
}
//# sourceMappingURL=martina.mask.d.ts.map