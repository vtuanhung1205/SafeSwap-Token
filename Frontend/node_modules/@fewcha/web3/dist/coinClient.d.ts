import { AptosClient, AptosAccount, Types as Gen } from "aptos";
export declare type FewchaCoinData = {
    coin_type_resource: string;
    name: string;
    symbol: string;
    decimals: number;
};
export declare type FewchaCoinStore = {
    coin: {
        value: string;
    };
};
/**
 * Class for creating, minting and managing minting coins
 */
export declare class FewchaCoinClient {
    aptosClient: AptosClient;
    /**
     * Creates new CoinClient instance
     * @param aptosClient AptosClient instance
     */
    constructor(aptosClient: AptosClient);
    /**
     * Brings together methods for generating, signing and submitting transaction
     * @param account AptosAccount which will sign a transaction
     * @param payload Transaction payload. It depends on transaction type you want to send
     * @returns Promise that resolves to transaction hash
     */
    submitTransactionHelper(account: AptosAccount, payload: Gen.EntryFunctionPayload): Promise<string>;
    /** Initialize the coin */
    initializeCoin(account: AptosAccount, resource_type: string, // resource_type: something like moon_coin::MoonCoin
    name: string, symbol: string, decimals: number): Promise<string>;
    /** Registers the coin */
    registerCoin(account: AptosAccount, coin_type_resource: string): Promise<string>;
    /** Mints the coin */
    mintCoin(account: AptosAccount, coin_type_resource: string, dst_address: string, amount: number): Promise<string>;
    /** Transfers the coins */
    transferCoin(account: AptosAccount, coin_type_resource: string, to_address: string, amount: number): Promise<string>;
    /** Get coin metadata */
    getCoinData(coin_type_resource: string): Promise<FewchaCoinData>;
    /** Get coin balance */
    getCoinBalance(account_address: string, coin_type_resource: string): Promise<string>;
    /** Get list registered coins (resource name) */
    getCoins(account_address: string): Promise<string[]>;
}
//# sourceMappingURL=coinClient.d.ts.map