/// <reference types="typescript" />
import { EIP1193Provider, IEthereumProvider, RequestArguments } from 'eip1193-provider';
import { Transaction, Connection } from '@solana/web3.js';

interface BaseConfig {
  appId?: string;
}

enum WalletAdapterNetwork {
  Mainnet = 'mainnet',
  Testnet = 'testnet',
  Devnet = 'devnet',
  Testing = 'testing',
  Premainnet = 'premainnet',
}

declare interface BloctoProviderInterface extends EIP1193Provider {
  isBlocto: boolean;
  isConnecting: boolean;
  connected: boolean;
  appId?: string;
  eventListeners: {
    [key: string]: Array<(arg?: any) => void>
  };
  code: string | null;
  sessionKey: string;
}

declare interface EthereumProviderConfig extends BaseConfig {
  chainId: string | number | null;
  rpc?: string;
  server?: string;
}

interface EIP1193RequestPayload {
  id?: number;
  jsonrpc?: string;
  method: string;
  params?: Array<any>;
}

declare interface EthereumProviderInterface extends BloctoProviderInterface, IEthereumProvider {
  chainId: string | number;
  networkId: string | number;
  chain: string;
  net: string;
  rpc: string;
  server: string;
  accounts: Array<string>;
  request(args: EIP1193RequestPayload): Promise<any>;
}

declare interface SolanaProviderConfig extends BaseConfig {
  net: string | null;
  server?: string;
  rpc?: string;
}

declare interface SolanaProviderInterface extends BloctoProviderInterface {
  net: string;
  rpc: string;
  server: string;
  accounts: Array<string>;

  connect(): Promise<void>;
  disconnect(): Promise<void>;
  request(params: RequestArguments): Promise<any>;

  signAndSendTransaction(transaction: Transaction, connection?: Connection): Promise<string>;
  convertToProgramWalletTransaction(transaction: Transaction): Promise<Transaction>;
}

declare interface AptosProviderConfig extends BaseConfig {
  // @todo: support different network
  chainId: number;
  server?: string;
}

declare interface PublicAccount {
  address: string | null
  publicKey: string[] | null
  authKey: string | null
  minKeysRequired?: number
}

type NetworkInfo = {
  api?: string;
  chainId?: string;
  name: WalletAdapterNetwork | undefined;
};

type TxOptions ={
  max_gas_amount?: string,
  gas_unit_price?: string,
  [key: string]: any
}

declare interface AptosProviderInterface extends BloctoProviderInterface {
  publicAccount: PublicAccount;
  network(): Promise<NetworkInfo>;
  connect: () => Promise<PublicAccount>;
  isConnected: () => Promise<boolean>;
  signAndSubmitTransaction(transaction: any, txOptions?:TxOptions): Promise<{ hash: HexEncodedBytes }>;
  signTransaction(transaction: any): Promise<SubmitTransactionRequest>;
  signMessage(payload: SignMessagePayload): Promise<SignMessageResponse>;
  disconnect(): Promise<void>;
}

// eslint-disable-next-line spaced-comment

declare interface BloctoSDKConfig extends BaseConfig {
  ethereum?: Omit<EthereumProviderConfig, 'appId'>;
  solana?: Omit<SolanaProviderConfig, 'appId'>;
  aptos?: Omit<AptosProviderConfig, 'appId'>;
}
declare class BloctoSDK {
  ethereum?: EthereumProviderInterface;
  solana?: SolanaProviderInterface;
  aptos?: AptosProviderInterface;
  constructor(config: BloctoSDKConfig);
}

export { AptosProviderConfig, AptosProviderInterface, BaseConfig, BloctoSDKConfig, EthereumProviderConfig, EthereumProviderInterface, SolanaProviderConfig, SolanaProviderInterface, BloctoSDK as default };
