import { PublicAccount, SignMessagePayload, SignMessageResponse, SnapConfig } from './types';
import { EntryFunctionPayload, PendingTransaction } from 'aptos/src/generated';
export * from './utils';
export declare type SnapInstallationParamNames = 'version' | string;
export default class WalletAdapter {
    protected readonly snapId: string;
    protected readonly config: SnapConfig;
    protected snapInstallationParams: Record<SnapInstallationParamNames, unknown>;
    protected _wallet: any | null;
    protected _connecting: boolean;
    constructor(config: SnapConfig, snapOrigin?: string, snapInstallationParams?: Record<SnapInstallationParamNames, unknown>);
    get connecting(): boolean;
    isConnected(): Promise<boolean>;
    account(): Promise<PublicAccount>;
    connect(): Promise<PublicAccount>;
    disconnect(): Promise<void>;
    private getClient;
    signAndSubmitTransaction(transactionPayload: EntryFunctionPayload, options: any): Promise<PendingTransaction>;
    signTransaction(transactionPayload: EntryFunctionPayload): Promise<Uint8Array>;
    signMessage(payload: SignMessagePayload): Promise<SignMessageResponse>;
}
